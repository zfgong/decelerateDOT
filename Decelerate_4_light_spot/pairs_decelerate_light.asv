function [light_window, pairs_decelerate_light_t] = pairs_decelerate_light( point_touch_light_t, pairs_decelerate_t, point_min)
% find the pairs of decelerate in -2 to +4 periods of tailspeed spanning
% light entering (not sure if the tailspeed periods work well or not)

% returns the IDs of pairs_decelerate if it is not empty
period = 4;
period_advance = 2;
pairs_decelerate_light_t =[];
% point_aft_light_index = find(point_touch_light_t <= point_min(:,1)); %11.06 change
% point_b4_light_index = find(point_touch_light_t > point_min(:,1));
% point_b4_light_index = flip(point_b4_light_index);

point_light_index = find(point_touch_light_t <= point_min(:,1));


if size(point_light_index,1) <period
    period = size(point_aft_light_index,1);
end

point_light_index = point_light_index(1);

if point_light_index <= period_advance
    period_advance = point_light_index-1;  % if advance period is larger than first light period number, than start from the first period
end

% if size(point_aft_light_index,1) <period
%     period = size(point_aft_light_index,1);
% end
%
% if size(point_b4_light_index,1) <period_advance
%     period_advance = size(point_b4_light_index,1);
% end
start_t = point_light_index-period_advance;
end_t = point_light_index+period;
if end_t > point_min(end,1)
    end_t = point_min(end,1);
end

frame_index = point_min(start_t:point_light_index+period,:);
light_window = [point_min(point_light_index-period_advance,1) point_min(point_light_index+period,1)];
% frame_index_1 = point_min(point_aft_light_index(1:period),:);
% frame_index_2 = point_min(point_b4_light_index(1:period_advance),:);
% frame_index_2 = flip(frame_index_2);
% frame_index = union(frame_index_2,frame_index_1);
if ~isempty(pairs_decelerate_t)
    pairs_decelerate_light_t_1 = intersect(frame_index(:,1), pairs_decelerate_t(:,1));
    if ~isempty(pairs_decelerate_light_t_1)
        idx = find(ismember(pairs_decelerate_t(:,1),pairs_decelerate_light_t_1));
        pairs_decelerate_light_t = pairs_decelerate_t(idx,:);
    end
end
end

